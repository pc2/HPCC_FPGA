
add_subdirectory(../../../shared ${CMAKE_BINARY_DIR}/lib/hpccbase)
set(HOST_SOURCE transpose_data.cpp)

set(HOST_EXE_NAME Transpose)
set(LIB_NAME trans)

set(BLA_VENDOR Intel10_64lp)
set(BLA_STATIC ON)
find_package(BLAS)

if (INTELFPGAOPENCL_FOUND)
    add_library(${LIB_NAME}_intel STATIC ${HOST_SOURCE})
    target_include_directories(${LIB_NAME}_intel PRIVATE ${HPCCBaseLibrary_INCLUDE_DIRS} ${CMAKE_BINARY_DIR}/src/common ${IntelFPGAOpenCL_INCLUDE_DIRS})
    target_include_directories(${LIB_NAME}_intel PUBLIC ${CMAKE_SOURCE_DIR}/src/host)
    add_executable(${HOST_EXE_NAME}_intel main.cpp)
    target_link_libraries(${LIB_NAME}_intel "${IntelFPGAOpenCL_LIBRARIES}" "${OpenMP_CXX_FLAGS}")
    target_link_libraries(${LIB_NAME}_intel hpcc_fpga_base)
    target_link_libraries(${HOST_EXE_NAME}_intel ${LIB_NAME}_intel)
    if (USE_SVM)
        target_compile_definitions(${LIB_NAME}_intel PRIVATE -DCL_VERSION_2_0)
    endif()
    if (BLAS_FOUND)
        target_link_libraries(${LIB_NAME}_intel ${BLAS_LIBRARIES})
        target_compile_definitions(${LIB_NAME}_intel PRIVATE -DMKL_FOUND)
        target_compile_options(${LIB_NAME}_intel PRIVATE "${BLAS_LINKER_FLAGS}")
        target_include_directories(${LIB_NAME}_intel PRIVATE "$ENV{MKL_ROOT}/include")
    endif()
    target_compile_definitions(${LIB_NAME}_intel PRIVATE -DINTEL_FPGA)
    target_compile_definitions(${HOST_EXE_NAME}_intel PRIVATE -DINTEL_FPGA)
    target_compile_options(${LIB_NAME}_intel PRIVATE "${OpenMP_CXX_FLAGS}")
    add_test(NAME test_intel_host_executable COMMAND $<TARGET_FILE:${HOST_EXE_NAME}_intel> -h)
endif()

if (Vitis_FOUND)
    if (USE_ACCL)
        set(CMAKE_SKIP_BUILD_RPATH No)
        set(CMAKE_BUILD_WITH_INSTALL_RPATH Yes)
        list(APPEND CMAKE_INSTALL_RPATH ${CMAKE_BINARY_DIR}/lib/accl/lib)
        list(APPEND kernel_files transpose_PQ_ACCL_stream_sendrecv.cpp transpose_PQ_ACCL_stream.cpp)
        foreach (files ${kernel_files})
            set(source_f "${CMAKE_BINARY_DIR}/src/device/${files}")
            set(base_file "${CMAKE_SOURCE_DIR}/src/device/${files}")
            add_custom_command(OUTPUT ${source_f}
            COMMAND ${Python3_EXECUTABLE} ${CODE_GENERATOR} -o ${source_f} -p num_replications=1 -p num_total_replications=1 ${base_file}
            MAIN_DEPENDENCY ${base_file})
            list(APPEND HOST_SOURCE ${source_f})
        endforeach()
    endif()
    add_library(${LIB_NAME}_xilinx STATIC ${HOST_SOURCE})
    target_include_directories(${LIB_NAME}_xilinx PRIVATE ${HPCCBaseLibrary_INCLUDE_DIRS} ${CMAKE_BINARY_DIR}/src/common ${Vitis_INCLUDE_DIRS})
    target_include_directories(${LIB_NAME}_xilinx PUBLIC ${CMAKE_SOURCE_DIR}/src/host)
    target_include_directories(${LIB_NAME}_xilinx PRIVATE ${extern_accl_SOURCE_DIR}/hlslib/include/xilinx)
    add_executable(${HOST_EXE_NAME}_xilinx main.cpp)
    target_link_libraries(${LIB_NAME}_xilinx ${Vitis_LIBRARIES} "${OpenMP_CXX_FLAGS}")
    target_link_libraries(${LIB_NAME}_xilinx hpcc_fpga_base)
    target_link_libraries(${HOST_EXE_NAME}_xilinx ${LIB_NAME}_xilinx)
    if (USE_ACCL)
        target_link_libraries(${HOST_EXE_NAME}_xilinx zmqpp)
    endif()
    target_compile_definitions(${LIB_NAME}_xilinx PRIVATE -DXILINX_FPGA)
    target_compile_definitions(${HOST_EXE_NAME}_xilinx PRIVATE -DXILINX_FPGA)
    target_compile_options(${LIB_NAME}_xilinx PRIVATE "${OpenMP_CXX_FLAGS}")
    add_test(NAME test_xilinx_host_executable COMMAND $<TARGET_FILE:${HOST_EXE_NAME}_xilinx> -h)
endif()

